.. Note that the reStructuredText (rst) 'note' directive is not used,
   because github does not style these in a way that makes them obvious.
   If this document is ever put into a sphinx scroll,
   therefore outside of the github readme,
   the adjustment should be made to make notes use the rst 'note' directive.

Game plan
=========

INSTALL
-------

1. ``virtualenv .``

2. ``./bin/python setup.py install``

3. Make a copy of ``development.ini.example`` and call it ``development.ini``.

4. Edit settings in ``development.ini`` as necessary.

5. ``./bin/pserve development.ini``

Documentation of data
---------------------

- should describe documents, binders and resources [**check**]
- should describe the role attribution on documents and binders [**check**]
- should describe the database schema for documents, binders and resources that contains associations to legacy database or at least a slight mapping.

Implement data abstractions
---------------------------

- should build object representations for documents and binders
- built object representations should additionally address and provide access to role attribution

Implement APIs
--------------

- should replicate read api on cnx-archive
- should be backwards compatible with the api in rhaptos2.repo

Document Authentication
-----------------------

- should describe procedure, cnx-user or oauth
- should describe high-level usage, permissions of the authenticated user

Document authorization
----------------------

- note, resources have no acls [**check**]
- should address document and binder ownership [**check**]
- should address document and binder change of ownership
- should address document and binder sharing
- should address document and binder deletion validations

Integrate webview
-----------------

- should work with a manual click through (functional tests later)


============================
Connexions Authoring Service
============================

Data structure
--------------

The connexions authoring environment is made up of **three content objects**:

:Documents: Modular HTML documents that contain written text by one or more authors.
:Binders: Collections of Documents bound together to make comprehensive subject matter from otherwise disconnected pieces. These could also be called collections, books, binders, scrollls, etc.
:Resources: Any *file* that is referenced within a document. This can be anything from an image to a suplimentary PDF.

Documents and binders have the following required pieces of data (aka metadata):

:title: A human readable title or name for the document.
:id: (Autogenerated) (saved internally as a UUID v4) (The user should never see this except indirectly in the url.)
:creation-datetime: (Autogenerated) The date and time the item was created.
:last-modified-datetime: (Computed) The date and time the item was last revised/edited.

Optional pieces of data (aka metadata):

:license: (Defaults to CC-BY-40) A protective license for the content is under.
:language: (Defaults to en-US) The language the content is written in.
:summary: A brief summary (aka abstract) of the document or binder.
:derived-from-*: The source or origin this work is derived from, where '*' can be url, isbn, or (internal) id.

Documents contains a content body of data as well. Binders have a tree or table of contents structure rather than a content body. The binder tree structures can have an infinite depth.

Resources are files which could be binary or text based data. Resources require a *mimetype* and *hash* (md5 hash is autogenerated).

Attribution are a set of data on document or binders that ascribe the work to people and/or organizations. They do not and should never be confused with the permissions someone has on a piece of work. Attributions are author(s), translator(s), illustrator(s), editor(s), and copyright-holder(s). Furthermore, attribution can be a simple name (e.g. 'Edgar Allen Poe') or a user id associated user authentication and profile system (i.e. a cnx-user user id).

Permissions
-----------

The **permissions** system is broke down into the following permissions:

:create: Ability to create a piece of work. (Everyone has this ability, except unauthenticated users.)
:view: Permission to see and read the work. (private vs public)
:edit: Permission to edit and update the work's data.
:publish: Ability to publish the work to a third-party archive system.
:delete: Ability to remove the work from the system. (Note, other relational validations apply)
:permit: Permission to assign and revoke permissions. 
:hammer: (Administrative permission)

The **roles** associated with the work are as follows:

:Viewer: (Zero or more users.) Permission to view. (Individual users can not be assigned to this role. It is a computed value, based whether the content is public or private. *Assignement disscussed later.*)
:Owner: (Ownership is limited to one user. *Assignment workflow discussed later.*) Permission to create, view, edit, publish, delete and permit.
:Maintainer: (Zero or more users can be assigned.) Permissions to view and edit.
:Publisher: (Zero or more users can be assigned.) Permission to view and publish.
:Manager: (Zero or more users can be assigned.) Permission to view, edit, permit and publish. (Note, the manager is not allowed to delete. Only the owner is allowed to do this and the ownership assignment workflow prevents an unverified ownership takeover.)

(This documentation is scoped to the authoring workflow and permissions. Prepublication and publcation submission workflows are discussed as part of the publication archive. In the authoring environment we only go so far as to say something like user has permission to publish, which means they have the ability to send the bits for publication. If the archive requires more information than this environment gives it, it should provide a detailed enough reason.)

License
-------

This software is subject to the provisions of the GNU Affero General
Public License Version 3.0 (AGPL). See license.txt for details.
Copyright (c) 2013 Rice University
